#!/usr/bin/env bash

set -e
# set -x

usage() {
	echo "Description" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") [-x] <arguments>" >&2
	echo >&2
	echo "options:" >&2
	echo "  -b    Include the Pull Request body." >&2
	echo "  -r    Include the Pull Request reviews." >&2
	echo "  -c    Include the Pull Request checks." >&2
	echo "  -o    Only print if the Pull Request is 'open' (not draft)." >&2
	echo "  -1    List the Pull Request in one line." >&2
	echo "  -s    Shorter summary." >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

declare -A checks_results
declare -A checks_summary
declare -A review_results
declare -A review_summary

summarize_checks() {
	checks="$(jq -c '.checks//[]|.[]' <<< "${details}")"
	checks_summary[total]=0
	checks_summary[count]=0
	checks_summary[fails]=0
	checks_summary[waits]=0

	if [ -n "${checks}" ]; then
	  while read -u 3 -r check; do
	    check_actor="$(jq -r '.name' <<< "${check}")"
	    check_status="$(jq -r '.status' <<< "${check}")"
	    check_result="$(jq -r '.result' <<< "${check}")"

	    if [ "${check_status}" = 'COMPLETED' ]; then
	      checks_results[$check_actor]="${check_result}"
	    else
	      checks_results[$check_actor]="${check_status}"
	    fi
	  done 3<<<"${checks}"
	fi

	for check_actor in "${!checks_results[@]}"; do
	  checks_summary[total]="$(( checks_summary[total] + 1 ))"

	  check_result="${checks_results[$check_actor]}"

	  case "${check_result}" in
	    SUCCESS | COMPLETED | NEUTRAL)
	      checks_summary[count]="$(( checks_summary[count] + 1 ))"
	      ;;

	    IN_PROGRESS | PENDING | QUEUED | REQUESTED | WAITING | EXPECTED)
	      checks_summary[waits]="$(( checks_summary[waits] + 1 ))"
	      ;;

	    SKIPPED | CANCELLED | STALE | ACTION_REQUIRED | FAILURE | STARTUP_FAILURE | TIMED_OUT | ERROR)
	      checks_summary[fails]="$(( checks_summary[fails] + 1 ))"
	      ;;
	  esac
	done

	if (( checks_summary[fails] > 0 )); then
		pr_checks_summary="Checks Failing: ${checks_summary[fails]} / ${checks_summary[total]}"
		pr_checks_summary_short="[Checks Fail: ${checks_summary[fails]} / ${checks_summary[total]}]"
		pr_check_status='FAIL'
		pr_checks_color="${E_CS}"
	elif (( checks_summary[count] > 0 )); then
	  pr_checks_summary="Checks Passing: ${checks_summary[count]} / ${checks_summary[total]}"
	  pr_checks_summary_short="[Checks Pass: ${checks_summary[count]} / ${checks_summary[total]}]"
	  pr_check_status='PASS'
	  pr_checks_color="${S_CS}"
	elif (( checks_summary[waits] > 0 )); then
	  pr_checks_summary="Checks Waiting: ${checks_summary[waits]} / ${checks_summary[total]}"
	  pr_checks_summary_short="[Checks Wait: ${checks_summary[waits]} / ${checks_summary[total]}]"
	  pr_check_status='WAIT'
	  pr_checks_color="${I_CS}"
	fi
}

summarize_reviews() {
	reviews="$(jq -c '.reviews//[]|.[]' <<< "${details}")"
	review_summary[total]=0
	review_summary[count]=0
	review_summary[fails]=0

	if [ -n "${reviews}" ]; then
	  while read -u 3 -r review; do
	    review_user="$(jq -r '.user' <<< "${review}")"
	    review_status="$(jq -r '.state' <<< "${review}")"

	    review_results[$review_user]="${review_status}"
	  done 3<<<"${reviews}"
	fi

	for review_user in "${!review_results[@]}"; do
	  review_summary[total]="$(( review_summary[total] + 1 ))"

	  review_status="${review_results[$review_user]}"

	  case "${review_status}" in
	    APPROVED)
	      review_summary[count]="$(( review_summary[count] + 1 ))"
	      ;;
	    CHANGES_REQUESTED)
	      review_summary[fails]="$(( review_summary[fails] + 1 ))"
	      ;;
	  esac
	done

	if (( review_summary[fails] > 0 )); then
		pr_review_summary="Reviews Rejected: ${review_summary[fails]} / ${review_summary[total]}"
		pr_review_summary_short="[Reviews Fail: ${review_summary[fails]} / ${review_summary[total]}]"
		pr_review_status='CHANGES'
		pr_review_color="${E_CS}"
	elif (( review_summary[count] > 0 )); then
	  pr_review_summary="Reviews Approved: ${review_summary[count]} / ${review_summary[total]}"
	  pr_review_summary_short="[Reviews Pass: ${review_summary[count]} / ${review_summary[total]}]"
		if (( review_summary[count] > 1 )); then
	  	pr_review_status='APPROVED'
		  pr_review_color="${S_CS}"
		else
			pr_review_status='REVIEWING'
			pr_review_color="${I_CS}"
		fi
	else
	  pr_review_summary="Reviews Waiting: ${review_summary[count]} / ${review_summary[total]}"
	  pr_review_summary_short="[Reviews Wait: ${review_summary[count]} / ${review_summary[total]}]"
	  pr_review_color="${I_CS}"
	fi
}

SHOW_BODY=false
SHOW_REVIEWS=false
SHOW_CHECKS=false
SHOW_ALL=true
ONE_LINE=false
SHORTER=false

while [[ "${1}" =~ ^- ]]; do
	if [ "${1}" = '-b' ]; then
		SHOW_BODY=true
	fi

	if [ "${1}" = '-r' ]; then
		SHOW_REVIEWS=true
	fi

	if [ "${1}" = '-c' ]; then
		SHOW_CHECKS=true
	fi

	if [ "${1}" = '-o' ]; then
		SHOW_ALL=false
	fi

	if [ "${1}" = '-1' ]; then
		ONE_LINE=true
	fi

	if [ "${1}" = '-s' ]; then
		SHORTER=true
	fi

	shift
done

details="${1}"

if [ -z "${details}" ]; then
	exit
fi

pr_number="$(jq -r '.number' <<< "${details}")"
pr_user="$(jq -r '.user' <<< "${details}")"
pr_open="$(jq -r '.open' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_draft="$(jq -r '.draft' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_mergeable="$(jq -r '.mergeable' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_state="$(jq -r '.state' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_date="$(jq -r '.date' <<< "${details}")"
pr_base="$(jq -r '.base' <<< "${details}")"
pr_head="$(jq -r '.head' <<< "${details}")"
pr_title="$(jq -r '.title' <<< "${details}")"
pr_link="$(jq -r '.link' <<< "${details}")"


open_color="${E_CS}"
state_color="${E_CS}"
if [ "${pr_draft}" == 'true' ]; then pr_open='draft'; fi
if [ "${pr_open}" == 'open' ]; then open_color="${S_CS}"; fi
if [ "${pr_open}" == 'draft' ]; then open_color="${I_CS}"; fi
if [ "${pr_state}" == 'mergeable' ]; then state_color="${S_CS}"; fi

if [ "${SHOW_ALL}" = 'false' ] && [ "${pr_open}" != 'open' ]; then
	exit
fi

summarize_checks
summarize_reviews

if [ "${pr_check_status}" = 'FAIL' ]; then
	pr_state='failed!'
	state_color="${E_CS}"
elif [ "${pr_check_status}" = 'WAIT' ]; then
	pr_state='waiting'
	state_color="${W_CS}"
elif [ "${pr_review_status}" = 'CHANGES' ]; then
	pr_state='reject!'
	state_color="${E_CS}"
elif [ "${pr_review_status}" = 'APPROVED' ]; then
	pr_state='approve'
	state_color="${S_CS}"
else
	pr_state='reviews'
	state_color="${I_CS}"
fi

pr_age_s="$(node -p <<< "Math.round((Date.now() - new Date('${pr_date}').getTime()) / 1000)")"

# seconds
ageCount="${pr_age_s}"
ageUnits="$([ "${ageCount}" == 1 ] && echo 'second' || echo 'seconds')"

# minutes
if (( ageCount > 120 )); then
	ageCount="$(( ageCount / 60 ))"
	ageUnits="$([ "${ageCount}" == 1 ] && echo 'minute' || echo 'minutes')"

	# hours
	if (( ageCount > 120 )); then
		ageCount="$(( ageCount / 60 ))"
		ageUnits="$([ "${ageCount}" == 1 ] && echo 'hour' || echo 'hours')"

		# days
		if (( ageCount > 48 )); then
			ageCount="$(( ageCount / 24 ))"
			ageUnits="$([ "${ageCount}" == 1 ] && echo 'day' || echo 'days')"
		fi
	fi
fi

pr_age="(updated ${ageCount} ${ageUnits} ago)"

if [ "${ONE_LINE}" = 'true' ]; then
	if [ "${pr_open}" = 'draft' ]; then
		pr_title_prefix='[draft review] ';
	fi

	if [ -t 1 ]; then
		SHORT_LINE="${L_CS}${pr_link} ${pr_title_prefix}${pr_title}"
		LONG_LINE="${I_CS}${pr_user} ${open_color}${pr_open} ${state_color}${pr_state} ${pr_checks_color}${pr_checks_summary_short} ${pr_review_color}${pr_review_summary_short} ${L_CS}${pr_link} ${N_CS}${pr_title_prefix}${pr_title}"
	else
		SHORT_LINE="${pr_link} ${pr_title_prefix}${pr_title}"
		LONG_LINE="${pr_user} ${pr_open} ${pr_state} ${pr_checks_summary_short} ${pr_review_summary_short} ${pr_link} ${pr_title_prefix}${pr_title}"
	fi

	if [ "${SHORTER}" == 'true' ]; then
		echo -e "${SHORT_LINE}" >&1
	else
		echo -e "${LONG_LINE}" >&1
	fi

else
	echo >&2
	echo -e "${D_CS}#${pr_number} ${I_CS}${pr_user} ${K_CS}- ${open_color}${pr_open} ${state_color}${pr_state} ${K_CS}${pr_age}${N_CS}" >&2
	echo -e "${K_CS}${pr_base} <- ${W_CS}${pr_head}${N_CS}" >&2
	echo -e "${N_CS}${pr_title}${N_CS}" >&2
	echo -e "${L_CS}${pr_link}${N_CS}" >&2
	if [ "${SHOW_CHECKS}" = false ] && [ -n "${pr_checks_summary}" ]; then
		echo -e "${pr_checks_color}${pr_checks_summary}${N_CS}" >&2
	fi
	if [ "${SHOW_REVIEWS}" = false ] && [ -n "${pr_review_summary}" ]; then
		echo -e "${pr_review_color}${pr_review_summary}${N_CS}" >&2
	fi
fi

if [ "${SHOW_CHECKS}" = true ]; then
  for check_actor in "${!checks_results[@]}"; do
    check_color="${K_CS}"
    check_status="${checks_results[$check_actor]}"

    case "${check_status}" in
      SUCCESS | COMPLETED | NEUTRAL)
        check_color="\033[38;5;$((124+33))m"
        ;;

      IN_PROGRESS | PENDING | QUEUED | REQUESTED | WAITING | EXPECTED)
        check_color="\033[38;5;$((160+27))m"
        ;;

      SKIPPED | CANCELLED | STALE | ACTION_REQUIRED | FAILURE | STARTUP_FAILURE | TIMED_OUT | ERROR)
        check_color="\033[38;5;$((196+21))m"
        ;;

      *) echo -e "${A_CS} Unknown review status: '${check_status}'${N_CS}" >&2
    esac

    echo -e "${check_actor}: ${check_color}${check_status}${N_CS}" >&2
  done

  echo -e "${pr_checks_summary}${N_CS}" >&2
fi

if [ "${SHOW_REVIEWS}" = true ]; then
  for review_user in "${!review_results[@]}"; do
    review_color="${K_CS}"
    review_status="${review_results[$review_user]}"

    case "${review_status}" in
      APPROVED)
        review_color="\033[38;5;$((124+33))m"
        ;;
      CHANGES_REQUESTED)
        review_color="\033[38;5;$((196+21))m"
        ;;
      *) echo -e "${A_CS} Unknown review status: '${review_status}'${N_CS}" >&2
    esac

    echo -e "${review_user}: ${review_color}${review_status}${N_CS}" >&2
  done

  echo -e "${pr_review_color}${pr_review_summary}${N_CS}" >&2
fi


if [ "${SHOW_BODY}" = true ]; then
	pr_body="$(jq -r '.body' <<< "${details}" | sed -e 's/\\r\\n/Ω/g' | tr 'Ω' '\n')"
	if [ -n "${pr_body}" ]; then
		echo -e "${pr_body}" >&2
	fi
fi
