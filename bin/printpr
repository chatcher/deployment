#!/usr/bin/env bash

set -e

usage() {
	echo "Description" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") [-x] <arguments>" >&2
	echo >&2
	echo "options:" >&2
	echo "  -x    Some unknown option" >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

show_body=false
if [[ "${1}" =~ ^-?-b(ody)?$ ]]; then
	show_body=true
	shift
fi

details="${1}"

if [ -z "${details}" ]; then
	exit
fi

pr_number="$(jq -r '.number' <<< "${details}")"
pr_open="$(jq -r '.open' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_state="$(jq -r '.state' <<< "${details}" | tr '[:upper:]' '[:lower:]')"
pr_title="$(jq -r '.title' <<< "${details}")"
pr_date="$(jq -r '.date' <<< "${details}")"
pr_user="$(jq -r '.user' <<< "${details}")"
pr_body="$(jq -r '.body' <<< "${details}" | sed -e 's/\\r\\n/Ω/g' | tr 'Ω' '\n')"
pr_head="$(jq -r '.head' <<< "${details}")"
pr_base="$(jq -r '.base' <<< "${details}")"
pr_link="$(jq -r '.link' <<< "${details}")"

reviews="$(jq -c '.reviews//[]|.[]' <<< "${details}")"

open_color="${E_CS}"
state_color="${E_CS}"
if [ "${pr_open}" == 'open' ]; then open_color="${S_CS}"; fi
if [ "${pr_state}" == 'mergeable' ]; then state_color="${S_CS}"; fi


pr_age_s="$(node -p <<< "Math.round((Date.now() - new Date('${pr_date}').getTime()) / 1000)")"

# seconds
ageCount="${pr_age_s}"
ageUnits="$([ "${ageCount}" == 1 ] && echo 'second' || echo 'seconds')"

# minutes
if (( ageCount > 120 )); then
	ageCount="$(( ageCount / 60 ))"
	ageUnits="$([ "${ageCount}" == 1 ] && echo 'minute' || echo 'minutes')"
fi

# hours
if (( ageCount > 120 )); then
	ageCount="$(( ageCount / 60 ))"
	ageUnits="$([ "${ageCount}" == 1 ] && echo 'hour' || echo 'hours')"
fi

# days
if (( ageCount > 48 )); then
	ageCount="$(( ageCount / 24 ))"
	ageUnits="$([ "${ageCount}" == 1 ] && echo 'day' || echo 'days')"
fi


pr_age="(updated ${ageCount} ${ageUnits} ago)"

echo >&2
echo -e "${D_CS}#${pr_number} ${I_CS}${pr_user} ${K_CS}- ${open_color}${pr_open} ${state_color}${pr_state} ${K_CS}${pr_age}${N_CS}" >&2
echo -e "${K_CS}${pr_base} <- ${W_CS}${pr_head}${N_CS}" >&2
echo -e "${N_CS}${pr_title}${N_CS}" >&2
echo -e "${L_CS}${pr_link}${N_CS}" >&2
if [ "${show_body}" = true ] && [ -n "${pr_body}" ]; then
	echo -e "${pr_body}" >&2
fi

declare -A review_users
declare -A approval
approval[count]=0
approval[total]=0
approval[ch_rq]=0


if [ -n "${reviews}" ]; then
	while read -u 3 -r review; do
		review_user="$(jq -r '.user' <<< "${review}")"
		review_status="$(jq -r '.state' <<< "${review}")"

		review_users[$review_user]="${review_status}"
	done 3<<<"${reviews}"
fi

for review_user in "${!review_users[@]}"; do
	review_color="${K_CS}"
	review_status="${review_users[$review_user]}"

	approval[total]="$(( approval[total] + 1 ))"

	case "${review_status}" in
		APPROVED)
			approval[count]="$(( approval[count] + 1 ))"
			review_color="\033[38;5;$((124+33))m"
			;;
		CHANGES_REQUESTED)
			approval[ch_rq]="$(( approval[ch_rq] + 1 ))"
			review_color="\033[38;5;$((196+21))m"
			;;
		*) echo -e "${A_CS} Unknown review status: '${review_status}'${N_CS}" >&2
	esac

	echo -e "${review_user}: ${review_color}${review_status}${N_CS}" >&2
done

approval_color="${I_CS}"
if (( approval[count] > 1 )); then
	approval_color="${S_CS}"
fi

if (( approval[count] > 0 )); then
	echo -e "${approval_color}Approved: ${approval[count]} / ${approval[total]}${N_CS}" >&2
fi

if (( approval[ch_rq] > 0 )); then
	echo -e "${E_CS}Blockers: ${approval[ch_rq]} / ${approval[total]}${N_CS}" >&2
fi
