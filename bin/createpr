#!/usr/bin/env bash

set -e
# set -x

usage() {
	echo "Create a draft Pull Request from the current branch." >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") <title>" >&2
	echo >&2
	echo "options:" >&2
	echo "  -b <branch>  Use <branch> as base branch instead of default." >&2
	echo "  -q           Run quickly and quietly, don't prompt for confirmations." >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

if [ -z "${GITHUB_TOKEN}" ]; then
	usage 'env var "GITHUB_TOKEN" not set'
fi

B_QUIET='no'

while (( $# > 0 )); do
	if [ "${1}" == '-b' ]; then
		shift
		base="${1}"
		shift
	elif [ "${1}" == '-q' ]; then
		shift
		B_QUIET='yes'
	else
		break
	fi
done

if [ -z "${base}" ]; then
	if [ "${1}" == 'hotfix' ]; then
		base='hotfix'
	else
		base="$(get-repo-base-branch)"
	fi
fi

if [ -z "${base}" ]; then
	usage "Missing base branch."
fi

bodyfile="$(mktemp)"

header=()
infix=()
while (( $# > 0 )); do
	line="${1}"
	if [[ "${line}" =~ http ]]; then
		suffix="${line##*/}"
		header+=("${suffix}")
		infix+=("[${suffix}](${line})")
		:
	else
		header+=("${line}")
	fi
  shift
done

content=''
if (( ${#infix[@]} > 0 )); then
	printf -v content "%s\n" "${infix[@]}"
fi

# [SQ](https://sonarqube.hpms.io/component_measures?id=$(get-repo-name)&pullRequest=TBD&metric=new_coverage)

read -d '' -r template <<TEMPLATE_MD || :
${header[*]}

# Description

${content}
See title.

## Types of changes

- [ ] New feature
- [ ] Bug fix
- [ ] Breaking change
- [ ] Refactor
- [ ] Test coverage
- [ ] Documentation
TEMPLATE_MD
printf "%s\n" "${template}" > "${bodyfile}"

if [ "${B_QUIET}" = 'no' ]; then
	nano "${bodyfile}"
fi

title="$(head -n 1 "${bodyfile}" | sed -e 's/"/\\"/g')"
body="$(tail -n +2 "${bodyfile}" | sed -e '/./,$!d' | tr '\n' 'Ω' | sed -e 's/Ω/\\r\\n/g' | sed -e 's/"/\\"/g')"

rm "${bodyfile}"

# message="$(generate-commit-message "${title}")"
branch="$(generate-branch-name "${title}")"
draft='true'

if [ -z "${title}" ]; then usage "Pull Request title is required."; fi
# if [ -z "${message}" ]; then usage "Could not derive commit message."; fi
if [ -z "${branch}" ]; then usage "Could not derive branch name."; fi
if [ -z "${base}" ]; then usage "Could not determine base branch."; fi

# TODO: try to recover from this:
# if has-remote-branch "${branch}" && ! [ "${branch}" != "$(get-current-branch)" ]; then
# 	usage "Branch already exists: '${branch}'"
# fi

if [ "${base}" = 'hotfix' ]; then
	if [[ "${title}" =~ ^hotfix ]]; then
		title="[hotfix]${title#hotfix}"
	else
		title="[hotfix] ${title}"
	fi
fi

read -d '' -r data <<JSON || :
{
	"title": "${title}",
	"base": "${base}",
	"head": "${branch}",
	"body": "${body}",
	"draft": ${draft}
}
JSON

echo -e "base: ${I_CS}${base}${N_CS}" >&2
echo -e "head: ${I_CS}${branch}${N_CS}" >&2
echo -e "draft: ${I_CS}${draft}${N_CS}" >&2
echo -e "title: ${I_CS}${title}${N_CS}" >&2
echo -e "body:\n${I_CS}${body}\n${K_CS}EOF${N_CS}" >&2

if [ "${B_QUIET}" = 'no' ]; then
	if ! prompt 'Look good?'; then exit 1; fi
fi

if [ "${branch}" != "$(get-current-branch)" ]; then
	checkout "${branch}"
fi

# git commit -S -m "${message}" --no-verify
git -c core.hooksPath=/dev/null push -u origin "${branch}" --no-verify
auth_header="Authorization: bearer ${GITHUB_TOKEN}"
accept_header='Accept: application/vnd.github.shadow-cat-preview+json'
github_url="$(get-repo-api)/repos/$(get-repo-path)/pulls"
response="$(curl -H "${auth_header}" -H "${accept_header}" "${github_url}" -d "${data}" -s)"

prn="$(jq '.number' <<< "${response}")"
user="$(jq -r '.user.login' <<< "${response}")"

if [ -z "${prn}" ] || [ "${prn}" == 'null' ]; then
	ERROR_MESSAGE="$(jq -r '.errors[0].message' <<< "${response}")"
	if [ "${ERROR_MESSAGE}" != 'null' ]; then
		echo -e "${A_CS} ${ERROR_MESSAGE} ${N_CS}" >&2
	else
		echo "${response}" >&2
		echo -e "${A_CS} Something bad happened. ${N_CS}" >&2
	fi
	exit 1
fi


# echo -e "${S_CS}Updating SQ link...${N_CS}" >&2
# body="$(sed -E -e "s/pullRequest=TBD/pullRequest=${prn}/" <<< "${body}")"
# read -d '' -r data <<JSON || :
# { "body": "${body}" }
# JSON
# accept_header='Accept: application/vnd.github.v3+json'
# github_url="$(get-repo-api)/repos/$(get-repo-path)/pulls/${prn}"
# curl -X PATCH -H "${auth_header}" -H "${accept_header}" "${github_url}" -d "${data}" -s


echo -e "${S_CS}Self-assigning PR...${N_CS}" >&2
read -d '' -r data << JSON || :
{ "assignees": ["${user}"] }
JSON
curl -H "${auth_header}" "$(get-repo-api)/repos/$(get-repo-path)/issues/${prn}/assignees" -d "${data}"


echo -e "${S_CS}Launching PR page...${N_CS}" >&2
link="$(get-pull-request-link "${prn}")"
open "${link}"

echo -e "${L_CS}${link}${N_CS}" >&2
