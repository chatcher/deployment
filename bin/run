#!/usr/bin/env bash

usage() {
	echo "Run the current project based on contents of package.json" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") <mode>" >&2
	echo >&2
	echo "mode:" >&2
	echo "  (default)  Run the project" >&2
	echo "  test       Run test suites; and watch for file changes" >&2
	echo "  cover      Run test suites just for code coverage" >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi >&2

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

filename='package.json'

while ! [ -f "${filename}" ] && [ "$(pwd)" != '/' ]; do
	cd ..
done

if ! [ -f "${filename}" ]; then
	usage "No ${filename} directory found in path; better luck next time."
fi

dev_script="$(jq -rc '.scripts.dev' package.json)"
start_script="$(jq -rc '.scripts.start' package.json)"
test_script="$(jq -rc '.scripts.test' package.json)"
main_script="$(jq -rc '.main' package.json)"


mode="${1:-default}"

if [[ "${mode}" =~ default ]]; then
	if [[ "${dev_script}" =~ nodemon ]]; then
		clear
		clear
		echo -e "${S_CS} Hosting via nodemon ${N_CS}" >&2
		node_env="${NODE_ENV}"
		log_level="${LOG_LEVEL}"
		export NODE_ENV=dev1
		export LOG_LEVEL=debug
		npx nodemon server/server.js --watch common --watch server
		export NODE_ENV="${node_env}"
		export LOG_LEVEL="${log_level}"

	elif [ "${dev_script}" != 'null' ]; then
		clear
		clear
		echo -e "${S_CS} Hosting via dev script ${N_CS}" >&2
		npm run dev

	elif [ "${start_script}" != 'null' ]; then
		clear
		clear
		echo -e "${S_CS} Running npm start ${N_CS}" >&2
		npm start

	else
		echo -e "dev_script:     '${dev_script}'" >&2
		echo -e "start_script:   '${start_script}'" >&2
		usage 'I dunno how run'
	fi

elif [[ "${mode}" =~ test ]]; then
	if [ "${test_script}" = 'ng test' ]; then
		clear
		clear
		echo -e "${S_CS} Testing via ng test ${N_CS}" >&2
		ng test --watch=true --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		clear
		clear
		echo -e "${S_CS} Testing via nyc mocha ${N_CS}" >&2
		node_env="${NODE_ENV}"
		log_level="${LOG_LEVEL}"
		export NODE_ENV=UNIT_TEST
		export LOG_LEVEL=warn
		npx nyc --reporter=lcov npx mocha --recursive server/tests --diff -w --watch-files server,common
		export NODE_ENV="${node_env}"
		export LOG_LEVEL="${log_level}"

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how test'
	fi

elif [[ "${mode}" =~ cover ]]; then
	if [ "${test_script}" = 'ng test' ]; then
		clear
		clear
		echo -e "${S_CS} Testing via ng test ${N_CS}" >&2
		ng test --watch=false --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		clear
		clear
		echo -e "${S_CS} Testing via nyc mocha ${N_CS}" >&2
		node_env="${NODE_ENV}"
		log_level="${LOG_LEVEL}"
		export NODE_ENV=UNIT_TEST
		export LOG_LEVEL=warn
		npx nyc --reporter=lcov npx mocha --recursive server/tests --diff
		export NODE_ENV="${node_env}"
		export LOG_LEVEL="${log_level}"

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how cover'
	fi

else
	usage "I dunno how to $mode"
fi

echo -e "${S_CS} Okay, all done. ${N_CS}" >&2
