#!/usr/bin/env bash

# set -x

preamble() {
	clear
	clear
	echo -e "${S_CS} ${1} ${N_CS}" >&2
}

pass() {
	echo -e "${S_CS} pass ${N_CS}" >&2
}

fail() {
	echo -e "${E_CS} fail ${N_CS}" >&2
}

temp_env() {
	source ~/.env

	node_env="${NODE_ENV}"
	log_level="${LOG_LEVEL}"

	export DYLD_LIBRARY_PATH="${HOME}/lib"
	export NODE_ENV="${1:-$node_env}"
	export LOG_LEVEL="${2:-$log_level}"
	trap 'export NODE_ENV="${node_env}"; export LOG_LEVEL="${log_level}";' EXIT

	if [ -e './.env' ]; then
		source ./.env
	fi
}

usage() {
	echo "Run the current project based on contents of package.json" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") <mode>" >&2
	echo >&2
	echo "mode:" >&2
	echo "  (default)  Run the project" >&2
	echo "  test       Run test suites; and watch for file changes" >&2
	echo "  cover      Run test suites just for code coverage" >&2
	echo "  staged     Run test suites against currently staged code" >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi >&2

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

while ! [ -f 'package.json' ] && ! [ -f 'go.mod' ] && [ "$(pwd)" != '/' ]; do
	cd ..
done

if ! [ -f 'package.json' ] && ! [ -f 'go.mod' ]; then
	usage "No package.json or go.mod directory found in path; better luck next time."
fi

npx='go'
nyc=''

if [ -f "package.json" ]; then
	npx='npx'
	if [ "$(jq -rc '.engines.yarn' package.json)" != 'null' ]; then npx=yarn; fi
	if [ "$(jq -rc '.devDependencies.istanbul' package.json)" != 'null' ]; then nyc='istanbul'; fi
	if [ "$(jq -rc '.devDependencies.nyc' package.json)" != 'null' ]; then nyc='nyc'; fi

	dev_script="$(jq -rc '.scripts.dev' package.json)"
	start_script="$(jq -rc '.scripts.start' package.json)"
	test_script="$(jq -rc '.scripts.test' package.json)"
	main_script="$(jq -rc '.main' package.json)"
elif [ -f 'go.mod' ]; then
	# dev_script="$(jq -rc '.scripts.dev' package.json)"
	# start_script="$(jq -rc '.scripts.start' package.json)"
	test_script="go test"
	# main_script="$(jq -rc '.main' package.json)"
fi


server_dir="server"
if [ ! -d "${server_dir}" ]; then server_dir="src"; fi
if [ ! -d "${server_dir}" ]; then server_dir="."; fi

watch_dirs=()
if [ ! -d "${server_dir}/api" ]; then watch_dirs+=( '--watch' "${server_dir}" ); fi
if [ -d "${server_dir}/api" ]; then watch_dirs+=( '--watch' "${server_dir}/api" ); fi
if [ -d "${server_dir}/config" ]; then watch_dirs+=( '--watch' "${server_dir}/config" ); fi
if [ -d 'common' ]; then watch_dirs+=( '--watch' 'common' ); fi

test_path='src/api/**/*.test.js'
if [ -d 'server/tests' ]; then test_path='server/tests'; fi
if [ -f 'Jenkinsfile-Lambda.config' ]; then test_path='src/**/*.test.js'; fi
if [ "${npx}" == 'go' ]; then test_path='./...'; fi

watch_dir="${server_dir}"
if [ -d "${watch_dir}/api" ]; then watch_dir="${watch_dir}/api"; fi
if [ -d 'common' ]; then watch_dir="${watch_dir},common"; fi

mode="${1:-default}"

echo -e "${I_CS} mode: ${mode} ${N_CS}" >&2
echo -e "${I_CS} npx: ${npx} ${N_CS}" >&2
echo -e "${I_CS} nyc: ${nyc} ${N_CS}" >&2
echo -e "${I_CS} test_script: ${test_script} ${N_CS}" >&2
echo -e "${I_CS} test_path: ${test_path} ${N_CS}" >&2
echo -e "${I_CS} watch_dirs: ${watch_dirs[*]} ${N_CS}" >&2

if [[ "${mode}" =~ default ]]; then
	if [[ "${dev_script}" =~ nodemon ]]; then
		preamble "[h1] Hosting via ${npx} nodemon"

		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'debug'
		else temp_env 'dev1' 'debug'
		fi

		$npx nodemon "./${main_script}" "${watch_dirs[@]}"

	elif [ "${start_script}" != 'null' ]; then
		preamble "[h22] Running npm start"
		npm start

	else
		echo -e "dev_script:     '${dev_script}'" >&2
		echo -e "start_script:   '${start_script}'" >&2
		usage 'I dunno how to run'
	fi

elif [[ "${mode}" =~ debug ]]; then
	if [[ "${dev_script}" =~ nodemon ]]; then
		preamble "[h1] Hosting via ${npx} nodemon"

		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'debug'
		else temp_env 'dev1' 'debug'
		fi

		node inspect "./${main_script}"

	elif [ "${start_script}" != 'null' ]; then
		preamble "[h22] Running npm start"
		node inspect "./${main_script}"

	else
		echo -e "dev_script:     '${dev_script}'" >&2
		echo -e "start_script:   '${start_script}'" >&2
		usage 'I dunno how to debug'
	fi

elif [[ "${mode}" =~ test ]]; then
	if [ "${test_script}" = 'ng test' ]; then
		preamble "[t1] Testing via ${npx} ng test watch=true"
		$npx ng test --source-map=false --watch=true --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		if [ "${npx}" = 'yarn' ]
		then preamble "[t2] Testing via ${npx} ${nyc} mocha [broken watch]"
		else preamble "[t3] Testing via ${npx} ${nyc} mocha watch=true"
		fi

		new_env='UNIT_TEST'

		if [ "${2}" = '--env' ]; then
			new_env="${3:-development}"

		elif [ "${npx}" = 'yarn' ]; then
			# new_env='development'
			new_env='unit_test'
		fi

		temp_env "${new_env}" 'warn'

		runner="${nyc}"
		reporter='--reporter=lcov'
		recursive='--exit'
		watch_switch='-w'
		watchers="${watch_dirs[*]}"

		if [ "${npx}" = 'yarn' ] && [ "${nyc}" = 'nyc' ]; then
			echo -e "${I_CS} yarn in nyc ${N_CS}" >&2
			# $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" --exit                           && pass || fail
			# runner="${nyc}" #default
			# reporter='--reporter=lcov'
			# recursive='--exit'
			watch_switch='--watch' # 'nodemon' # EADDRINUSE error when mocha tries to watch files
			watchers=''

		elif [ "${npx}" = 'yarn' ] && [ "${nyc}" = 'istanbul' ]; then
			echo -e "${I_CS} yarn in istanbul ${N_CS}" >&2
			# $npx                          mocha -b "${test_path}" --exit                            && pass || fail
			runner=''
			reporter=''
			# recursive='--exit'
			watch_switch='' # EADDRINUSE error when mocha tries to watch files
			watchers=''

		elif [ "${npx}" = 'npx' ] && [ "${nyc}" = 'nyc' ]; then
			echo -e "${I_CS} npx in nyc ${N_CS}" >&2
			# $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" --recursive -w "${watch_dirs[*]}" && pass || fail
			# runner="${nyc}" #default
			# reporter='--reporter=lcov'
			recursive='--recursive'
			# watch_switch='-w'
			# watchers="${watch_dirs[*]}"

		elif [ "${npx}" = 'npx' ] && [ "${nyc}" = 'istanbul' ]; then
			echo -e "${I_CS} npx in istanbul ${N_CS}" >&2
			usage "I'm not set up for that!"
			# $npx                          mocha -b "${test_path}"             -w "${watch_dirs[*]}" && pass || fail

			# runner=''
			# runner="${nyc}" #default

			# reporter=''
			# reporter='--reporter=lcov' #default

			recursive=''
			# recursive='--exit'
			# recursive='--recursive'

			# watch_switch='-w'
			# watchers="${watch_dirs[*]}"


		# if [ "${nyc}" = 'nyc' ]; then
		# 	if [ "${npx}" = 'yarn' ]
		# 	then $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" --exit && pass || fail
		# 	else $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" --recursive -w "${watch_dirs[*]}" && pass || fail
		# 	fi

		# elif [ "${nyc}" = 'istanbul' ]; then
		# 	if [ "${npx}" = 'yarn' ]
		# 	then $npx mocha -b "${test_path}" --exit && pass || fail
		# 	else $npx mocha -b "${test_path}" -w "${watch_dirs[*]}" && pass || fail
		# 	fi

		else
			usage 'I dunno what to do with this.'
		fi

		echo "runner: ${runner}" >&2
		echo "reporter: ${reporter}" >&2
		echo "test_path: ${test_path}" >&2
		echo "recursive: ${recursive}" >&2
		echo "watch_switch: ${watch_switch}" >&2
		echo "watchers: ${watchers[@]}" >&2

		if [ -z "${runner}" ] && [ -z "${reporter}" ]; then
			usage "I guess that's not going to work"
			# $npx nyc --reporter=lcov mocha -b "${test_path}" "${watch_switch}" "${watchers}" && pass || fail
		elif [ -z "${runner}" ]; then
			$npx "${reporter}" mocha -b "${test_path}" "${recursive}" "${watch_switch}" ${watchers[@]} && pass || fail
		elif [ -z "${reporter}" ]; then
			$npx "${runner}" mocha -b "${test_path}" "${recursive}" "${watch_switch}" ${watchers[@]} && pass || fail
		# elif [ "${watch_switch}" == 'nodemon' ]; then
		# 	$npx "${watch_switch}" --exec "\"${npx} ${runner} ${reporter} mocha -b ${test_path} ${recursive}\"" ${watchers[@]} 'src/api/**' && pass || fail
		else
			$npx "${runner}" "${reporter}" mocha -b "${test_path}" "${recursive}" "${watch_switch}" ${watchers[@]} && pass || fail
		fi

	elif [ "${test_script}" == 'go test' ]; then
		preamble "[t1] Testing via go test"
		go test -v "${test_path}"

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but, I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how to test'
	fi

elif [[ "${mode}" =~ once ]]; then
	if [ "${test_script}" = 'ng test' ]; then
		preamble " [o1] Testing via ${npx} ng test watch=false"
		$npx ng test --source-map=false --watch=false --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		preamble " [o2] Testing via ${npx} ${nyc} mocha watch=false"

		new_env='UNIT_TEST'

		if [ "${2}" = '--env' ]; then
			new_env="${3:-development}"

		elif [ "${npx}" = 'yarn' ]; then
			# new_env='development'
			new_env='unit_test'
		fi

		temp_env "${new_env}" 'warn'

		if [ "${nyc}" = 'nyc' ]; then
			if [ "${npx}" = 'yarn' ]
			then $npx "${nyc}" --reporter=lcov mocha "${test_path}" --exit && pass || fail
			else $npx "${nyc}" --reporter=lcov mocha "${test_path}" --recursive --exit && pass || fail
			fi

		elif [ "${nyc}" = 'istanbul' ]; then
			$npx mocha "${test_path}" --exit && pass || fail

		else
			usage 'I dunno what to do with this.'
		fi

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how to run once'
	fi

elif [[ "${mode}" =~ cover ]]; then
	rm -rf './coverage'

	if [ "${test_script}" = 'ng test' ]; then
		preamble "[c1] Testing via ${npx} ng test watch=false"
		$npx ng test --source-map=false --watch=false --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		preamble "[c2] Testing via ${npx} ${nyc} mocha watch=false"
		if [ "${npx}" = 'yarn' ]
		then temp_env 'unit_test' 'warn'
		else temp_env 'UNIT_TEST' 'warn'
		fi

		if [ "${nyc}" = 'nyc' ]; then
			if [ "${npx}" = 'yarn' ]
			then $npx "${nyc}" --reporter=lcov mocha "${test_path}" --exit
			else $npx "${nyc}" --reporter=lcov mocha "${test_path}" --recursive --exit
			fi

		elif [ "${nyc}" = 'istanbul' ]; then
	    $npx "${nyc}" cover _mocha --report lcov -- -R spec "${test_path}" --recursive --exit
		else
			$npx mocha "${test_path}" --exit
		fi

	elif [ "${test_script}" == 'go test' ]; then
		preamble "[t1] Testing via go test"
    rm -rf ./coverage
		mkdir ./coverage
		go test ./... -coverprofile=./coverage/c.out
		go tool cover -html=./coverage/c.out

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how to run cover'
	fi

	if [ -f './coverage/lcov-report/index.html' ]; then
		open -a 'Google Chrome' './coverage/lcov-report/index.html'
	elif [ -f './coverage/index.html' ]; then
		open -a 'Google Chrome' './coverage/index.html'
	else
		echo -e "${W_CS} Dunno where the coverage report is. ${N_CS}" >&2
	fi

elif [[ "${mode}" =~ stage ]]; then
	rm -rf './coverage' >&2
	rm -rf './.nyc_output' >&2
	if [ -d 'docs/v1' ]; then git checkout docs/v1/swagger* >&2; fi
	git stash -u --keep-index >&2
	run once || :
	git restore -W -S . >&2
	git stash apply --index >&2
	git stash drop >&2

elif [[ "${mode}" =~ check ]]; then

	echo -e "npx:            '${npx}'" >&2
	echo -e "nyc:            '${nyc}'" >&2
	echo >&2
	echo -e "dev_script:     '${dev_script}'" >&2
	echo -e "start_script:   '${start_script}'" >&2
	echo -e "test_script:    '${test_script}'" >&2
	echo -e "main_script:    '${main_script}'" >&2
	echo >&2
	echo -e "server_dir:     '${server_dir}'" >&2
	echo -e "watch_dir:      '${watch_dir}'" >&2
	echo >&2

	echo -e "${S_CS} (default) ${N_CS}" >&2
	if [[ "${dev_script}" =~ nodemon ]]; then
		echo -e "\t" $npx nodemon "./${main_script}" "${watch_dirs[@]}"
	elif [ "${start_script}" != 'null' ]; then
		echo -e "\t" npm start
	else
		echo -e "\t" usage "'I dunno how to run'"
	fi

	echo -e "${S_CS} test ${N_CS}" >&2
	if [ "${test_script}" = 'ng test' ]; then
		echo -e "\t" $npx ng test --source-map=false --watch=true --code-coverage --source-map

	elif [[ "${test_script}" =~ mocha ]]; then
		if [ -z "${nyc}" ]; then
			if [ "${npx}" = 'yarn' ]
			then echo -e "\t" $npx mocha -b "${test_path}" --exit
			else echo -e "\t" $npx mocha -b "${test_path}" -w "${watch_dirs[*]}"
			fi
		else
			if [ "${npx}" = 'yarn' ]
			then echo -e "\t" $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" --exit
			else echo -e "\t" $npx "${nyc}" --reporter=lcov mocha -b "${test_path}" -w "${watch_dirs[*]}"
			fi
		fi

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but, I'm not sure. ${N_CS}" >&2
	else
		echo -e "\t" usage "'I dunno how to test'"
	fi

	echo -e "${S_CS} cover ${N_CS}" >&2
	if [ "${test_script}" = 'ng test' ]; then
		echo -e "\t" $npx ng test --source-map=false --watch=false --code-coverage --source-map
	elif [[ "${test_script}" =~ mocha ]]; then
		if [ "${nyc}" = 'nyc' ]; then
			$npx "${nyc}" --reporter=lcov mocha "${test_path}" --exit
		elif [ "${nyc}" = 'istanbul' ]; then
			$npx "${nyc}" cover _mocha -report lcovonly -- -R spec "${test_path}" --recursive --exit
		else
			$npx mocha "${test_path}" --exit
		fi
	elif [ "${test_script}" != 'null' ]; then
		echo -e "\t" usage "'maybe just npm run test'"
	else
		echo -e "\t" usage "'I dunno how to cover'"
	fi

else
	usage "I dunno how to ${mode}"
fi

echo -e "${S_CS} Okay, all done. ${N_CS}" >&2
