#!/usr/bin/env bash

preamble() {
	clear
	clear
	echo -e "${S_CS} ${1} ${N_CS}" >&2
}

temp_env() {
	node_env="${NODE_ENV}"
	log_level="${LOG_LEVEL}"
	export NODE_ENV="${1:-$node_env}"
	export LOG_LEVEL="${2:-$log_level}"
	trap 'export NODE_ENV="${node_env}"; export LOG_LEVEL="${log_level}";' EXIT
}

usage() {
	echo "Run the current project based on contents of package.json" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") <mode>" >&2
	echo >&2
	echo "mode:" >&2
	echo "  (default)  Run the project" >&2
	echo "  test       Run test suites; and watch for file changes" >&2
	echo "  cover      Run test suites just for code coverage" >&2
	echo "  staged     Run test suites against currently staged code" >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi >&2

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

filename='package.json'

while ! [ -f "${filename}" ] && [ "$(pwd)" != '/' ]; do
	cd ..
done

if ! [ -f "${filename}" ]; then
	usage "No ${filename} directory found in path; better luck next time."
fi

npx='npx'

if [ "$(jq -rc '.engines.yarn' package.json)" != 'null' ]; then npx=yarn; fi

dev_script="$(jq -rc '.scripts.dev' package.json)"
start_script="$(jq -rc '.scripts.start' package.json)"
test_script="$(jq -rc '.scripts.test' package.json)"
main_script="$(jq -rc '.main' package.json)"

server_dir="server"
if [ ! -d "${server_dir}" ]; then server_dir="src"; fi
if [ ! -d "${server_dir}" ]; then server_dir="."; fi

watch_dirs=()
if [ ! -d "${server_dir}/api" ]; then watch_dirs+=( '--watch' "${server_dir}" ); fi
if [ -d "${server_dir}/api" ]; then watch_dirs+=( '--watch' "${server_dir}/api" ); fi
if [ -d "${server_dir}/config" ]; then watch_dirs+=( '--watch' "${server_dir}/config" ); fi
if [ -d 'common' ]; then watch_dirs+=( '--watch' 'common' ); fi

test_path='src/api/**/*.test.js'
if [ -d 'server/tests' ]; then test_path='server/tests'; fi

watch_dir="${server_dir}"
if [ -d "${watch_dir}/api" ]; then watch_dir="${watch_dir}/api"; fi
if [ -d 'common' ]; then watch_dir="${watch_dir},common"; fi

mode="${1:-default}"

if [[ "${mode}" =~ default ]]; then
	if [[ "${dev_script}" =~ nodemon ]]; then
		preamble "Hosting via ${npx} nodemon"
		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'debug'
		else temp_env 'dev1' 'debug'
		fi

		$npx nodemon "./${main_script}" "${watch_dirs[@]}"

	elif [ "${start_script}" != 'null' ]; then
		preamble "Running npm start"
		npm start

	else
		echo -e "dev_script:     '${dev_script}'" >&2
		echo -e "start_script:   '${start_script}'" >&2
		usage 'I dunno how run'
	fi

elif [[ "${mode}" =~ test ]]; then
	if [[ "${test_script}" =~ mocha ]]; then
		preamble "Testing via ${npx} nyc mocha watch=true"
		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'warn'
		else temp_env 'UNIT_TEST' 'warn'
		fi
		$npx nyc --reporter=lcov mocha "${test_path}" --exit

	elif [ "${test_script}" = 'ng test' ]; then
		preamble "Testing via ${npx} ng test watch=true"
		$npx ng test --watch=true --code-coverage --source-map

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how test'
	fi

elif [[ "${mode}" =~ cover ]]; then
	rm -rf './coverage'

	if [[ "${test_script}" =~ mocha ]]; then
		preamble "Testing via ${npx} nyc mocha watch=false"
		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'warn'
		else temp_env 'UNIT_TEST' 'warn'
		fi
		$npx nyc --reporter=lcov mocha --exit --recursive 'src/api/**/*.test.js'

	elif [ "${test_script}" = 'ng test' ]; then
		preamble "Testing via ${npx} ng test watch=false"
		$npx ng test --watch=false --code-coverage --source-map

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how cover'
	fi

	if [ -f './coverage/lcov-report/index.html' ]; then
		open -a 'Google Chrome' './coverage/lcov-report/index.html'
	elif [ -f './coverage/index.html' ]; then
		open -a 'Google Chrome' './coverage/index.html'
	else
		echo -e "${W_CS} Dunno where the coverage report is. ${N_CS}" >&2
	fi


elif [[ "${mode}" =~ stage ]]; then
	rm -rf './coverage' >&2
	git checkout docs/v1/swagger* >&2
	git stash --keep-index >&2
	# !! apply and drop stage after running tests

	if [[ "${test_script}" =~ mocha ]]; then
		preamble "Testing via ${npx} nyc mocha watch=false"
		if [ "${npx}" = 'yarn' ]
		then temp_env 'development' 'warn'
		else temp_env 'UNIT_TEST' 'warn'
		fi
		$npx nyc --reporter=lcov mocha --exit --recursive 'src/api/**/*.test.js'

	elif [ "${test_script}" = 'ng test' ]; then
		preamble "Testing via ${npx} ng test watch=false"
		$npx ng test --watch=false --code-coverage --source-map

	elif [ "${test_script}" != 'null' ]; then
		echo -e "${A_CS}Maybe it's like: ${N_CS}" >&2
		echo "${test_script}" >&2
		echo -e "${E_CS}but I'm not sure. ${N_CS}" >&2

	else
		usage 'I dunno how cover'
	fi

	git stash apply >&2
	git stash drop >&2

	# if [ -f './coverage/lcov-report/index.html' ]; then
	# 	open -a 'Google Chrome' './coverage/lcov-report/index.html'
	# elif [ -f './coverage/index.html' ]; then
	# 	open -a 'Google Chrome' './coverage/index.html'
	# else
	# 	echo -e "${W_CS} Dunno where the coverage report is. ${N_CS}" >&2
	# fi


elif [[ "${mode}" =~ check ]]; then

	echo -e "npx:            '${npx}'" >&2
	echo >&2
	echo -e "dev_script:     '${dev_script}'" >&2
	echo -e "start_script:   '${start_script}'" >&2
	echo -e "test_script:    '${test_script}'" >&2
	echo -e "main_script:    '${main_script}'" >&2
	echo >&2
	echo -e "server_dir:     '${server_dir}'" >&2
	echo -e "watch_dir:      '${watch_dir}'" >&2
	echo >&2

	echo -e "${S_CS} (default) ${N_CS}" >&2
	if [[ "${dev_script}" =~ nodemon ]]; then
		echo -e "\t"  npx nodemon ./server/server.js --watch server --watch common >&2
		echo -e "\t" $npx nodemon "./${main_script}" "${watch_dirs[@]}"
		echo -e "\t" yarn nodemon ./src/index.js --watch src/api --watch src/config >&2
	elif [ "${dev_script}" != 'null' ]; then
		echo -e "\t" npm run dev
	elif [ "${start_script}" != 'null' ]; then
		echo -e "\t" npm start
	else
		echo -e "\t" usage "'I dunno how run'"
	fi

	echo -e "${S_CS} test ${N_CS}" >&2
	if [ "${test_script}" = 'ng test' ]; then
		echo -e "\t" $npx ng test --watch=true --code-coverage --source-map
	elif [[ "${test_script}" =~ mocha ]]; then
		echo -e "\t"  npx nyc --reporter=lcov    npx   mocha --recursive server/tests           -w --watch-files server,common >&2
		echo -e "\t" $npx nyc --reporter=lcov "${npx}" mocha --recursive "${test_path}"         -w --watch-files "${watch_dir}"
		echo -e "\t" yarn nyc --reporter=lcov    yarn  mocha --recursive 'src/api/**/*.test.js' -w --watch-files src/api >&2
	elif [ "${test_script}" != 'null' ]; then
		echo -e "\t" usage "'maybe just npm run test'"
	else
		echo -e "\t" usage "'I dunno how test'"
	fi

	echo -e "${S_CS} cover ${N_CS}" >&2
	if [ "${test_script}" = 'ng test' ]; then
		echo -e "\t" $npx ng test --watch=false --code-coverage --source-map
	elif [[ "${test_script}" =~ mocha ]]; then
		echo -e "\t"  npx nyc --reporter=lcov    npx   mocha --exit --recursive server/tests >&2
		echo -e "\t" $npx nyc --reporter=lcov "${npx}" mocha --exit --recursive "${test_path}"
		echo -e "\t" yarn nyc --reporter=lcov    yarn  mocha --exit --recursive 'src/api/**/*.test.js' >&2
	elif [ "${test_script}" != 'null' ]; then
		echo -e "\t" usage "'maybe just npm run test'"
	else
		echo -e "\t" usage "'I dunno how cover'"
	fi

else
	usage "I dunno how to $mode"
fi

echo -e "${S_CS} Okay, all done. ${N_CS}" >&2
