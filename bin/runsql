#!/usr/bin/env bash

set -e
# set -x

gather_env_vars() {
	source ~/.env

	re="$(sed -E -e 's/[^a-z]/./g' <<< "${db_id}" | tr '[:lower:]' '[:upper:]')"

	while read -u 3 -r line; do
		if [[ "${line}" =~ ^[a-zA-Z0-9._-]+= ]]; then
			var="${line%=*}"
			val="${line#*=}"

			if [[ "${var}" =~ HOST ]] && [[ "${val}" =~ $db_id ]]; then
				# echo -e "${D_CS} '${var}' = '${val}' ${N_CS}" >&2

				# Found what looks like a database host
				if [ -z "${db_host}" ]; then
					# echo -e "${D_CS} using that ${N_CS}" >&2
					db_host="${var}"
				elif [[ "${var}" =~ $re ]]; then
					# echo -e "${D_CS} switching ${N_CS}" >&2
					db_host="${var}"
				else
					# but we already have one picked out
					# echo -e "${D_CS} skipping that ${N_CS}" >&2
					:
				fi
			fi
		fi
	done 3<<< "$(env)"

	if [ -z "${db_host}" ]; then usage 'Failed to figure out a database variable for the host.'; fi

	# db_host="${db_host}"
	db_port="${db_host/HOST/PORT}"
	db_user="${db_host/HOST/USER}"
	db_pass="${db_host/HOST/PASSWORD}"
	db_name="${db_host/HOST/DATABASE}"

	# if [ "${db_user}" == 'ORACLE_DEV1_DB_USER' ]; then
	# 	ORACLE_DEV1_DB_USER='pbp'
	# 	ORACLE_DEV1_DB_PASSWORD="${ORACLE_HPMSDEV1_READWRITE}"
	# fi

	if [ -z "${db_port}" ]; then usage 'Failed to figure out a database variable for the port.'; fi
	if [ -z "${db_user}" ]; then usage 'Failed to figure out a database variable for the user.'; fi
	if [ -z "${db_pass}" ]; then usage 'Failed to figure out a database variable for the pass.'; fi
	if [ -z "${db_name}" ]; then usage 'Failed to figure out a database variable for the name.'; fi


	if [ -z "${!db_host}" ]; then usage "Picked up ${db_host} for the host, but it has no value.'"; fi
	if [ -z "${!db_port}" ]; then usage "Picked up ${db_port} for the port, but it has no value.'"; fi
	if [ -z "${!db_user}" ]; then usage "Picked up ${db_user} for the user, but it has no value.'"; fi
	if [ -z "${!db_pass}" ]; then usage "Picked up ${db_pass} for the pass, but it has no value.'"; fi
	if [ -z "${!db_name}" ]; then usage "Picked up ${db_name} for the name, but it has no value.'"; fi

	echo -e "${K_CS} Using ${db_host} = ${!db_host} ${N_CS}" >&2
	echo -e "${K_CS} Using ${db_port} = ${!db_port} ${N_CS}" >&2
	echo -e "${K_CS} Using ${db_user} = ${!db_user} ${N_CS}" >&2
	echo -e "${K_CS} Using ${db_pass} = ${!db_pass} ${N_CS}" >&2
	echo -e "${K_CS} Using ${db_name} = ${!db_name} ${N_CS}" >&2
}

usage() {
	echo "For the specified DB, run the specified SQL query" >&2
	echo >&2
	echo "usage:" >&2
	echo "  $(basename "${0}") <db_id> <sql_file> [<key>=<value>, ...]" >&2
	echo >&2
	echo "parameters:" >&2
	echo "  db_id" >&2
	echo "        The name of the database to run the query against. E.g. 'oracle'" >&2
	echo "  sql_file" >&2
	echo "        The filename of the query to run." >&2
	echo "  key=value" >&2
	echo "        Arbitrary key-value data to provide to the query, such as IDs." >&2
	echo >&2

	if [ -n "${1}" ]; then echo -e "${A_CS} error: ${1} ${N_CS}" >&2; fi

	exit 1
}

if [[ "${1}" =~ ^-?-h(elp)?$ ]]; then usage ''; fi

# if [ -z "${1}" ]; then usage 'Database identifier required'; fi
# if [ -z "${2}" ]; then usage 'SQL Script name required'; fi

db_id="${1}"; shift || :
sql_file="${1}"; shift || :

if [ -n "${sql_file}" ]; then
	sql_file="${sql_file#bin/sql/oracle/sql/}"
	sql_file="${sql_file#bin/sql/aurora/sql/}"
	sql_file="${sql_file%.sql}"
fi

db_host=
db_port=
db_user=
db_pass=
db_name=

# set -m
# (sleep 30; kill -15 -$$) &
# killer=$!
# trap 'kill -- -"${killer}" 2>/dev/null' EXIT

if [[ "${db_id}" =~ oracle ]]; then
	echo -e "${K_CS} Running Oracle query ${N_CS}" >&2
	cd "$(dirname "${BASH_SOURCE[0]}")/sql/${db_id%-*}" || usage "Failed to cd into ${db_id} directory."
	gather_env_vars

	oracle='/Users/chad.hatcher/sqlcl/bin/sql'
	login="${!db_user}/\"${!db_pass}\"@//${!db_host}:${!db_port}/${!db_name}"

  variables=""
  var_id=1
  while (( $# > 0 )); do
    if [[ "${1}" =~ .=. ]]; then
      variables="DEFINE $(sed -E -e "s/=(.*)/ = '\1'/" <<< "${1}")\n${variables}"
    elif [ -n "${1}" ]; then
      variables="DEFINE arg${var_id} = '${1}'\n${variables}"
      var_id=$(( var_id + 1))
    fi
    shift
  done

	if [ -z "${sql_file}" ]; then
		echo -e "${S_CS} Connecting to database... ${N_CS}" >&2
		# kill -- -"${killer}" 2>/dev/null
		# trap - EXIT
		echo 'logging in'
		$oracle -L "${login}"
		echo 'done'

	elif [ ! -f "sql/${sql_file}.sql" ]; then
		echo -e "${S_CS} You said: ${N_CS}" >&2
		echo -e "${W_CS} ${sql_file} ${N_CS}" >&2
		if prompt 'Execute that as a query?'; then
			$oracle -L "${login}" <<SQL
SET SQLFORMAT ANSICONSOLE;
SET PAGESIZE 50000;
SET SQLBLANKLINES ON;
SET LONG 2000;
SET VERIFY OFF;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY/MM/DD HH:MI:SS PM';
${sql_file};
SQL
		else
			usage "I don't see a sql script called ${sql_file}"
		fi

	elif [ -f "sql/${sql_file}.dat" ]; then
		echo -e "${S_CS} Executing SQL file with data file... ${N_CS}" >&2
		$oracle -S -L "${login}" "@sql/${sql_file}.sql" <"sql/${sql_file}.dat"

	elif [ -z "${variables}" ]; then
		echo -e "${S_CS} Executing SQL file... ${N_CS}" >&2
		$oracle -S -L "${login}" <<SQL
SET SQLFORMAT ANSICONSOLE;
SET PAGESIZE 50000;
SET SQLBLANKLINES ON;
SET VERIFY OFF;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY/MM/DD HH:MI:SS PM';
@sql/${sql_file}.sql
SQL

	else
		echo -e "${S_CS} Executing SQL script with variables... ${N_CS}" >&2
		echo -e "${D_CS} ${variables} ${N_CS}" >&2
		$oracle -S -L "${login}" <<SQL
SET SQLFORMAT ANSICONSOLE;
SET PAGESIZE 50000;
SET SQLBLANKLINES ON;
SET VERIFY OFF;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY/MM/DD HH:MI:SS PM';
${variables}
@sql/${sql_file}.sql
SQL


	fi

elif [[ "${db_id}" =~ aurora ]] || [[ "${db_id}" =~ local ]]; then
	echo -e "${K_CS} Running Aurora query ${N_CS}" >&2
	cd "$(dirname "${BASH_SOURCE[0]}")/sql/${db_id%-*}" || usage "Failed to cd into ${db_id} directory."
	gather_env_vars

  variables=""
  var_id=1
  while (( $# > 0 )); do
    if [[ "${1}" =~ .=. ]]; then
      variables="set @$(sed -E -e "s/=(.*)/='\1'/" <<< "${1}");\n${variables}"
    elif [ -n "${1}" ]; then
      variables="set @arg${var_id} = '${1}';\n${variables}"
      var_id=$(( var_id + 1))
    fi
    shift
  done

	if [ -z "${sql_file}" ]; then
		echo -e "${S_CS} Connecting to database... ${N_CS}" >&2
		# kill -- -"${killer}" 2>/dev/null
		# trap - EXIT
		mysql -A --connect-expired-password --table "--host=${!db_host}" "--port=${!db_port}" "--user=${!db_user}" "--password=${!db_pass}"

	elif [ ! -f "sql/${sql_file}.sql" ]; then
		echo -e "${S_CS} You said: ${N_CS}" >&2
		echo -e "${W_CS} ${sql_file} ${N_CS}" >&2
		if prompt 'Execute that as a query?'; then
			mysql -A --connect-expired-password --table "--host=${!db_host}" "--port=${!db_port}" "--user=${!db_user}" "--password=${!db_pass}" <<<"${sql_file};"
		else
			usage "I don't see a sql script called ${sql_file}"
		fi

	elif [ -z "${variables}" ]; then
		echo -e "${S_CS} Executing SQL file... ${N_CS}" >&2
		mysql -A --connect-expired-password --table "--host=${!db_host}" "--port=${!db_port}" "--user=${!db_user}" "--password=${!db_pass}" <"sql/${sql_file}.sql"

	else
		echo -e "${S_CS} Executing SQL script with variables... ${N_CS}" >&2
		mysql -A --connect-expired-password --table "--host=${!db_host}" "--port=${!db_port}" "--user=${!db_user}" "--password=${!db_pass}" -e "${variables} source sql/${sql_file}.sql;"
	fi

else
	echo -e "${K_CS} Detecting database ${N_CS}" >&2
	as_oracle=false
	as_aurora=false

	if [ -e "$(dirname "${BASH_SOURCE[0]}")/sql/oracle/sql/${db_id}.sql" ]; then
		as_oracle=true
	fi

	if [ -e "$(dirname "${BASH_SOURCE[0]}")/sql/aurora/sql/${db_id}.sql" ]; then
		as_aurora=true
	fi

	if $as_oracle && $as_aurora; then
		usage "Please specify a database in order to run '${db_id}'."

	elif $as_oracle; then
		echo -e "${I_CS} Switching to Oracle ${N_CS}" >&2
		${BASH_SOURCE[0]} 'oracle' "${db_id}" "${sql_file}" "$@"

	elif $as_aurora && ! $as_oracle; then
		echo -e "${I_CS} Switching to Aurora ${N_CS}" >&2
		${BASH_SOURCE[0]} 'aurora' "${db_id}" "${sql_file}" "$@"

	else
		usage "Unknown database: '${db_id}'."
	fi

	exit
fi

echo -e "${S_CS} Done ${N_CS}" >&2
